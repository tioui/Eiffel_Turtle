note
	description: "EiffelVision Custom Application.%
		%The original version of this class has been generated by EiffelBuild."
	generator: "EiffelBuild"
	date: "$Date: 2010-12-22 10:39:24 -0800 (Wed, 22 Dec 2010) $"
	revision: "$Revision: 85202 $"

deferred class
	TURTLE_APPLICATION

inherit
	EV_APPLICATION
		export
			{NONE} all
		select
			default_create,
			copy
		end
	THREAD
		rename
			default_create as default_create_thread,
			make as make_thread,
			copy as copy_thread,
			launch as launch_thread,
			sleep as sleep_thread
		export
			{NONE} all
		end


feature {NONE} -- Initialization

	make
			-- Create, initialize and launch event loop.
		do
			default_create
			create main_window
			create floor
			create turtle.make (agent floor.draw_point)
			create mouse.make(main_window.turtle_area)
			main_window.initialize_elements (turtle, floor)
				-- Show Window
			main_window.show
			make_thread
			launch_thread
			launch
			if terminated then
				join
			else
				-- I know, normaly, I should join the thread, but I want it simple to program.
			end
		end

feature -- Access

	turtle:TURTLE_TURTLE
		-- The turtle sprite
	floor:TURTLE_FLOOR
		-- The floor below the turtle.
	mouse:TURTLE_MOUSE


	reset
		do
			turtle.reset
			floor.reset
		end



feature {NONE} -- Implementation

	main_window: TURTLE_WINDOW
			-- Application Main Window.	


end
